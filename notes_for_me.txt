----------------------------------------------------------------------

Создание виртуального окружения:
---
1ый способ:
python -m venv <имя окружения>
---
2ой способ:
pip install virtualenv
virtualenv <имя окружения>
---
Зайти в виртуальное окружение:
-Linux:
source <имя окружения>/bin/activate
-Windows:
<имя окружения>\Scripts\activate
---
-Выйти из виртуального окружения:
deactivate

----------------------------------------------------------------------

Файл requirements.txt:
---
Запись в файл:
pip freeze > requirements.txt
---
Чтение с файла:
pip install -r requirements.txt

----------------------------------------------------------------------

Git:
---
(файл .gitconfig содержит конфигурации Git)
(файл .gitignore содержит наименование папок и файлов которые игнорирует Git)
---
Установить имя пользователя в Git:
git config --global user.name "<имя>"
---
Установить почту пользователя в Git:
git config --global user.email "<почта>"
---
Просмотр конфигураций:
git config --list
---
Создать базу данных .git в репозитории:
git init .
---
Проверка статуса (происходящее в базе Git):
git status
---
Список бренчей:
git branch
---
Создать бренч:
git branch <имя бренча>
---
Перейти на другой бренч:
git checkout <имя бренча>
---
Удаление бренча:
git branch -d <имя бренча>
---
Добавление файлов в репозиторий Git:
git add . (вместо точки можно указать папку или файл)
--
Закрепление в Git:
git commit -m "<описание закрепления>"
---
Копировать проект с сервера:
git clone <ссылка>
---
Отправка обновленного проекта с пк на сервер:
git push
---
Обновление проекта на пк с сервера:
git pull

----------------------------------------------------------------------

Django:
---
Создание проекта:
django-admin startproject <имя проекта> . (точка не создает подкаталог с именем проекта)
---
Создание приложения:
python manage.py startapp <имя приложения>
---
Миграции:
python manage.py makemigrations
python manage.py migrate
---
Создание суперпользователя:
python manage.py createsuperuser
---
Запуск локального сервера:
python manage.py runserver
---
Запуск тестирования
python manage.py test
---
Копирует файлы из STATICFILES_DIRS в STATIC_ROOT
python manage.py collectstatic
----------------------------------------------------------------------

React:
---
Создать приложение:
npx create-react-app <имя приложения>
(если версия npm меньше чем 5.2 - вместо npx прописать npm)
---
Запустить сервер React:
npm start
---
Объединяет приложение в статические файлы для производства:
npm run build
---
Запуск тестирования:
npm test
--- 
Удаляет этот инструмент и копирует зависимости сборки, файлы конфигурации
и скрипты в каталог приложения. (Если вы сделаете это, вы не сможете вернуться!):
npm run eject

----------------------------------------------------------------------

Django + React.js

1. Создание проекта
    - на ПК должен быть установлен node.js, npm (node package manager) и yarn
    Всегда при изменении файлов в React:
        - Объединить приложение в статические файлы для производства (build)
        - копировать файлы из STATICFILES_DIRS в STATIC_ROOT

2. Axios и тестовое API
    - установить в React -> axios (для осуществления запросов к API (при желании модно воспользоваться fetch вместо axios))
    npm install axios

3. Модели - Manager - QuerySet

4. Serializer Viewset Router

5. POST, PUT, DELETE - Создание, изменение и удаление объекта
       - Postman - для тестирования API

6. Navbar + views.py serializer.py рефакторинг
    - установить в React -> Bootstrap:
        npm install --save bootstrap

